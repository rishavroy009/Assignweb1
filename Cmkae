#include <iostream>
#include <fstream>
#include <pbnjson.hpp>

void printJson(const pbnjson::JValue& value) {
    if (value.isObject()) {
        for (const auto& key : value.children()) {
            std::cout << "Key: " << key.first.asString() << std::endl;
            printJson(key.second);
        }
    } else if (value.isArray()) {
        for (const auto& element : value.items()) {
            printJson(element);
        }
    } else {
        std::cout << "Value: " << value.stringify() << std::endl;
    }
}

void parseJson(const std::string& filename) {
    std::ifstream file(filename);
    if (!file.is_open()) {
        std::cerr << "Failed to open file: " << filename << std::endl;
        return;
    }

    pbnjson::JDomParser parser;
    if (!parser.parseFile(filename.c_str(), pbnjson::JSchema::AllSchema())) {
        std::cerr << "Failed to parse JSON file: " << filename << std::endl;
        return;
    }

    const pbnjson::JValue& root = parser.getDom();
    printJson(root);
}

int main(int argc, char* argv[]) {
    if (argc != 2) {
        std::cerr << "Usage: " << argv[0] << " <json_file>" << std::endl;
        return 1;
    }

    const std::string json_file = argv[1];
    parseJson(json_file);

    return 0;
}
