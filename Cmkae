#include <iostream>
#include <fstream>
#include <pbnjson.hpp>

void printKeysAndValues(const pbnjson::JValue& json) {
    if (!json.isObject()) {
        std::cerr << "JSON is not an object!" << std::endl;
        return;
    }

    // Print keys
    std::cout << "Keys: ";
    for (const auto& key : json.children()) {
        std::cout << key.first << " ";
    }
    std::cout << std::endl;

    // Print values
    std::cout << "Values: ";
    for (const auto& key : json.children()) {
        std::cout << key.second.stringify() << " ";
    }
    std::cout << std::endl;
}

int main(int argc, char* argv[]) {
    if (argc != 2) {
        std::cerr << "Usage: " << argv[0] << " <json_file>" << std::endl;
        return 1;
    }

    std::ifstream jsonFile(argv[1]);
    if (!jsonFile.is_open()) {
        std::cerr << "Could not open the file!" << std::endl;
        return 1;
    }

    std::string jsonString((std::istreambuf_iterator<char>(jsonFile)), std::istreambuf_iterator<char>());
    pbnjson::JDomParser parser;

    if (!parser.parse(jsonString, pbnjson::JSchema::AllSchema())) {
        std::cerr << "JSON parse error: " << parser.getError() << std::endl;
        return 1;
    }

    pbnjson::JValue parsedJson = parser.getDom();

    // Call function to print keys and values
    printKeysAndValues(parsedJson);

    return 0;
}
