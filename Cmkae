#include <bits/stdc++.h>
using namespace std;

int main(){
    int n;
    cin>>n;
    set<string> st;
    //suffix array set
    for(int i=0;i<n;i++){
        string str;
        cin>>str;
        int len=str.length();
        int p=len-1;
        while(p>=0){
            st.insert(str.substr(p));
            p--;
        }
    }
    
    
    vector<string> subs(st.size());
    vector<int> lens(st.size());
    vector<int> height(st.size());
    int c=0;
    //set to vector and length vector for easy access
    for(auto x:st){
        subs[c]=x;
        lens[c]=x.length();
        c++;
    }
    //LCP array
    for(int i=1;i<subs.size();i++){
        int less_size= min(lens[i],lens[i-1]);
        height[i]=less_size;
        for(int l=0;l<less_size;l++){
            if(subs[i][l]!=subs[i-1][l]){
                height[i]=l;
                break;
            }
        }
        
    }
    
    
    int q;
    cin>>q;
    while(q--){
        int k;
        cin>>k;
        int ind=0;
        while(k> lens[ind]- height[ind] && ind<subs.size()){
            k = k- (lens[ind]-height[ind]);   // if k is within that index and their contri substrings then reduce that much substrings from k since that much already contributed
            ind++;
        }
        
        if(ind>=subs.size())cout<< ("INVALID")<<endl;
        else cout<< subs[ind].substr(0,k+height[ind])<<endl;
    }
    
    
}
