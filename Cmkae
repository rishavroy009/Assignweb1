#include <iostream>
#include <fstream>
#include <pbnjson.hpp>

void printKeysAndValues(const pbnjson::JValue& json) {
    std::string keys;
    std::string values;

    for (auto it = json.begin(); it != json.end(); ++it) {
        if (!keys.empty()) keys += " ";
        if (!values.empty()) values += " ";
        keys += it.key().asString();
        values += it.value().stringify();
    }

    std::cout << keys << std::endl;
    std::cout << values << std::endl;
}

int main(int argc, char* argv[]) {
    if (argc != 2) {
        std::cerr << "Usage: " << argv[0] << " <json_file>" << std::endl;
        return 1;
    }

    std::ifstream jsonFile(argv[1]);
    if (!jsonFile.is_open()) {
        std::cerr << "Could not open the file!" << std::endl;
        return 1;
    }

    std::string jsonString((std::istreambuf_iterator<char>(jsonFile)), std::istreambuf_iterator<char>());
    pbnjson::JDomParser parser;

    if (!parser.parse(jsonString, pbnjson::JSchema::AllSchema())) {
        std::cerr << "JSON parse error: " << parser.getError() << std::endl;
        return 1;
    }

    pbnjson::JValue parsedJson = parser.getDom();
    printKeysAndValues(parsedJson);

    return 0;
}
