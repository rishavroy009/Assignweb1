#include <bits/stdc++.h>

using namespace std;

int rows[4]={0,0,1,-1};
int cols[4]={1,-1,0,0};

int main(){
	int n,sol=0;
	cin>>n;

	string s;
	cin>>s;
	set<pair<int,int>> st;
	pair<int,int> start={0,0};
	pair<int,int> start2=start;
	st.insert(start);
	int max_i=INT_MIN;
	int max_j=INT_MIN;
	int min_i=INT_MAX;
	int min_j=INT_MAX;
	
	for(int i=0;i<n;i++){
		int dir=s[i]-'0';
		start2=start;
		if(dir==0){
			start.first=start.first+rows[dir]*2;
			start.second=start.second+cols[dir]*2;
			start2.first=start2.first+2*rows[dir];
			start2.second=start2.second+2*cols[dir]-1;
		}
		else if(dir==1){
			start.first=start.first+rows[dir]*2;
			start.second=start.second+cols[dir]*2;
			start2.first=start2.first+2*rows[dir];
			start2.second=start2.second+2*cols[dir]+1;
		}
		else if(dir==2){
			start.first=start.first+rows[dir]*2;
			start.second=start.second+cols[dir]*2;
			start2.first=start2.first+2*rows[dir]-1;
			start2.second=start2.second+2*cols[dir];
		}
		else if(dir==3){
			start.first=start.first+rows[dir]*2;
			start.second=start.second+cols[dir]*2;
			start2.first=start2.first+2*rows[dir]+1;
			start2.second=start2.second+2*cols[dir];
		}
		max_i= max(max_i,start.first);
		max_i=max(max_i,start2.first);
		max_j=max(max_j,start.second);
		max_j=max(max_j,start2.second);
		min_i=min(min_i,start.first);
		min_i=min(min_i,start2.first);
		min_j=min(min_j,start.second);
		min_j=min(min_j,start2.second);
		st.insert(start);
		st.insert(start2);
	}
	int a=0;
	int b=0;
	if(min_i<0)a=abs(min_i);
	if(min_j<0)b=abs(min_j);
	int r=a+max_i+1;
	int c=b+max_j+1;
	
	
	vector<vector<int>> grid(r,vector<int>(c,0));
	
	for(auto temp:st){
	
		int i=temp.first+a;
		int j=temp.second+b;
		grid[i][j]=1;
	}
	
	queue<pair<int,int>> q;
	vector<vector<bool>> used(r,vector<bool>(c,false));
	
	for(int i=0;i<r;i++){
		for(int j=0;j<c;j++){
			
			if(grid[i][j]==0 && i>0 && i<r-1 && j>0 && j<c-1 && !used[i][j]){
				
				bool check=true;
				q.push({i,j});
				used[i][j]=true;
				while(!q.empty()){
					pair<int,int> curr=q.front();
					q.pop();
					for(int k=0;k<4;k++){
						int ni=curr.first+rows[k];
						int nj=curr.second+cols[k];
						
						if(ni<0 || ni>r-1 || nj<0 || nj>c-1 || grid[ni][nj]==1 || used[ni][nj]){
							continue;
						}
						
						if(ni==0 || ni==r-1 || nj==0 || nj==c-1){
							check=false;
							used[ni][nj]=true;
							continue;
						}
						q.push({ni,nj});
						used[ni][nj]=true;
					}
				}
				if(check)sol++;
			}
			
		}
	}
	cout<<sol<<"\n";
	return 0;
}
