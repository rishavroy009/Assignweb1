#include<bits/stdc++.h>

using namespace std;
const int N = 100001;
const int a = 26;
const long long MOD = (long long) (1e9 + 7);


long long inverse_power(long long x,long long y){
    long long res=1;
    x=x % MOD;
    while(y>0){
        if(y%2==1){
            res = (res * x) %MOD;
        }
        x= (x * x) % MOD;
        y=y/2;
    }
    return res;
}

long long fact[N];
long long rfact[N];
vector<vector<int>> freq(N, vector<int>(a, 0));

long long calc(int l,int r){
    int sum=0;
    int odd=0;
    long long res=1;
    for(int i=0;i<a;i++){
        int curr= freq[r][i]- freq[l-1][i];
        if(curr>0){
            
        
        sum+=curr/2;
        res =res * rfact[curr/2]%MOD;
        if(curr%2==1)odd++;
        }
        
    }
    res= res* max(1,odd)%MOD;
    res =res * fact[sum]%MOD;
    return res;
}


int main(){
   
      fact[0] = 1;
    rfact[0] = 1;
    for (int i = 1; i < N; i++) {
        fact[i] = fact[i - 1] * i % MOD;
        rfact[i] = inverse_power(fact[i], MOD - 2);
    }
string str;
    cin >> str;
    int n = str.length();

    // Initialize cnt vector
    for (int i = 0; i < n; i++) {
        freq[i + 1][str[i] - 'a']++;
    }

    // Precompute prefix frequency counts
    for (int i = 1; i <= n; i++) {
        for (int j = 0; j <a; j++) {
          
                freq[i][j] += freq[i - 1][j];
            
        }
    }
int q;
    cin >> q;
    for (int i = 0; i < q; i++) {
        int l, r;
        cin >> l >> r;
        cout << calc(l, r) << endl;
    }
    return 0;    
}





