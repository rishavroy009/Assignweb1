#include <iostream>
#include <vector>
#include <string>

using namespace std;

typedef long long ll;

const int N = 100001;
const int A = 'z' - 'a' + 1;
const ll MOD = (ll)1e9 + 7;

ll power(ll x, ll y) {
    ll result = 1;  // Start with 1 as the initial result
    x = x % MOD;    // Ensure x is within the modulus
    while (y > 0) {
        if (y % 2 == 1) {
            result = (result * x) % MOD;  // If y is odd, multiply by x
        }
        x = (x * x) % MOD;  // Square the base
        y = y / 2;           // Halve the exponent
    }
    return result;
}
ll fact[N], rfact[N];

int n, q;
string s;
vector<vector<int>> cnt(N, vector<int>(A, 0));

ll calc(int l, int r) {
    int sum = 0;
    int odd = 0;
    ll res = 1;
    for (int i = 0; i < A; i++) {
        int cur = cnt[r][i] - cnt[l - 1][i];
        sum += cur / 2;
        res = res * rfact[cur / 2] % MOD;
        if (cur % 2 == 1) {
            odd++;
        }
    }
    res = res * max(1, odd) % MOD;
    res = res * fact[sum] % MOD;
    return res;
}

int main() {
    fact[0] = 1;
    rfact[0] = 1;
    for (int i = 1; i < N; i++) {
        fact[i] = fact[i - 1] * i % MOD;
        rfact[i] = power(fact[i], MOD - 2);
    }

    cin >> s;
    n = s.length();

    // Initialize cnt vector
    for (int i = 0; i < n; i++) {
        cnt[i + 1][s[i] - 'a']++;
    }

    // Precompute prefix frequency counts
    for (int i = 0; i <= n; i++) {
        for (int j = 0; j < A; j++) {
            if (i > 0) {
                cnt[i][j] += cnt[i - 1][j];
            }
        }
    }

    cin >> q;
    for (int i = 0; i < q; i++) {
        int l, r;
        cin >> l >> r;
        cout << calc(l, r) << endl;
    }

    return 0;
}
