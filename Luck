#include <bits/stdc++.h>
using namespace std;

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int n, k, q;
    cin >> n >> k >> q;

    vector<vector<int>> teams(k + 1);  // team numbers are 1-based

    // Initial fighters
    for (int i = 0; i < n; ++i) {
        int strength, team;
        cin >> strength >> team;
        teams[team].push_back(strength);
    }

    // Sort each team once
    for (int i = 1; i <= k; ++i) {
        sort(teams[i].begin(), teams[i].end());
    }

    // Handle queries
    while (q--) {
        int type;
        cin >> type;

        if (type == 1) {
            int team, strength;
            cin >> team >> strength;
            // Insert while keeping sorted order
            auto& t = teams[team];
            auto it = upper_bound(t.begin(), t.end(), strength);
            t.insert(it, strength);
        } else {
            int x, y;
            cin >> x >> y;

            // Copy and reverse both teams (to access strongest first)
            vector<int> a = teams[x], b = teams[y];
            int na = a.size(), nb = b.size();

            vector<int> A(na), B(nb);
            for (int i = 0; i < na; ++i) A[i] = a[na - 1 - i];
            for (int i = 0; i < nb; ++i) B[i] = b[nb - 1 - i];

            // Calculate total strength
            long long sumA = 0, sumB = 0;
            for (int i = 0; i < na; ++i) sumA += A[i];
            for (int i = 0; i < nb; ++i) sumB += B[i];

            int i = 0, j = 0;
            bool turn = true;  // true: A's turn, false: B's turn

            while (true) {
                if (turn) {
                    if (sumA >= sumB) {
                        cout << x << "\n";
                        break;
                    }
                    if (i >= na) {
                        cout << y << "\n";
                        break;
                    }
                    int s = A[i++];
                    while (s-- && j < nb) sumB -= B[j++];
                } else {
                    if (sumB >= sumA) {
                        cout << y << "\n";
                        break;
                    }
                    if (j >= nb) {
                        cout << x << "\n";
                        break;
                    }
                    int s = B[j++];
                    while (s-- && i < na) sumA -= A[i++];
                }
                turn = !turn;
            }
        }
    }

    return 0;
}
