#include <iostream>
#include <vector>
#include <algorithm>
#include <map>
using namespace std;

map<int, vector<int>> teams;

// Simulates the fight between team x and y (x attacks first)
int simulateFight(vector<int> a, vector<int> b) {
    int turn = 0; // 0 = a's turn, 1 = b's turn
    while (!a.empty() && !b.empty()) {
        if (turn == 0) {
            int strength = a[0];
            a.erase(a.begin());
            int kill = min(strength, (int)b.size());
            b.erase(b.begin(), b.begin() + kill);
        } else {
            int strength = b[0];
            b.erase(b.begin());
            int kill = min(strength, (int)a.size());
            a.erase(a.begin(), a.begin() + kill);
        }
        turn ^= 1;
    }
    return b.empty() ? 1 : 2;
}

int main() {
    int n, t, q;
    cin >> n >> t >> q;

    for (int i = 0; i < n; ++i) {
        int strength, team;
        cin >> strength >> team;
        teams[team].push_back(strength);
    }

    // Sort each team's fighters in descending order
    for (auto& kv : teams)
        sort(kv.second.rbegin(), kv.second.rend());

    for (int i = 0; i < q; ++i) {
        int type;
        cin >> type;
        if (type == 1) {
            int p, x;
            cin >> p >> x;
            // Insert in descending order
            auto& vec = teams[x];
            vec.insert(lower_bound(vec.begin(), vec.end(), p, greater<int>()), p);
        } else {
            int x, y;
            cin >> x >> y;
            int winner = simulateFight(teams[x], teams[y]);
            cout << (winner == 1 ? x : y) << endl;
        }
    }

    return 0;
}
