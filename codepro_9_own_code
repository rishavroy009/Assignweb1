#include <bits/stdc++.h>
using namespace std;

int dist_calc(pair<int,int> a,pair<int,int> b){
	return abs(a.first-b.first)+abs(a.second-b.second);
}
int calc_cost(vector<int> indices,vector<pair<int,int>> points,pair<int,int> office){

	int cost=dist_calc(office,points[indices[0]]);
	int parcels=1;
	int i=0;
	
	while(i<indices.size()-1){
		int dist=dist_calc(points[indices[i]],points[indices[i+1]]);
		int moving_cost=dist*(1+parcels);
		cost+=moving_cost;
		parcels++;
		i++;
	}
	cost+=dist_calc(points[indices[i]],office)*(1+parcels);
	return cost;
	
	
	
}

int perm_cost(vector<int>& indices,vector<pair<int,int>> points,pair<int,int> office){
	if(indices.size()==0)return 0;
	int final_cost=calc_cost(indices,points,office);
	while(next_permutation(indices.begin(),indices.end())){
		int current_cost=calc_cost(indices,points,office);
		final_cost=min(final_cost,current_cost);
	}
	return final_cost;
	
}
int findmincost(pair<int,int> off1,pair<int,int> off2,vector<pair<int,int>> points,int n){
	int ans=INT_MAX;
	int moves=1<<n;
	for(int i=0;i<moves;i++){
		int temp_cost=INT_MAX;
		vector<int> first_off;
		vector<int> second_off;
		for(int j=0;j<n;j++){
			if(i & (1<<j))first_off.push_back(j);
			else second_off.push_back(j);
		}
		
		int costA=perm_cost(first_off,points,off1);
		int costB=perm_cost(second_off,points,off2);
		ans=min(ans,costA+costB);
	}
	return ans;
	
}

int main(){
	int n;
	cin>>n;
	pair<int,int> off1;
	pair<int,int> off2;
	cin>>off1.first;
	cin>>off1.second;
	cin>>off2.first;
	cin>>off2.second;
	vector<pair<int,int>> points;
	for(int i=0;i<n;i++){
		int x;
		int y;
		cin>>x;
		cin>>y;
		points.push_back({x,y});
		
	}
	
	cout<<findmincost(off1,off2,points,n)<<endl;
}
